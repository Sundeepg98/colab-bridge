#!/bin/bash
# Claude-Colab Bridge Initialization Script
# Run this in any project to enable bridge functionality

echo "🌉 Initializing Claude-Colab Bridge"
echo "==================================="

# Set bridge environment variables
export COLAB_BRIDGE_PATH="/var/projects/claude-colab-bridge"
export COLAB_FOLDER_ID="1tzHn4J3QntSLJlJNXcNJe3cLdILGEb3Z"
export SERVICE_ACCOUNT_PATH="/var/projects/eng-flux-459812-q6-e05c54813553.json"

# Personal Claude Tools integration path
export PERSONAL_TOOLS_PATH="/var/projects/personal-claude-tools/colab-integration"

# Get project name from current directory or parameter
if [ -n "$1" ]; then
    PROJECT_NAME="$1"
else
    PROJECT_NAME=$(basename "$PWD")
fi

export COLAB_PROJECT_NAME="$PROJECT_NAME"

echo "✅ Bridge environment configured:"
echo "   Project: $PROJECT_NAME"
echo "   Bridge Path: $COLAB_BRIDGE_PATH"
echo "   Folder ID: $COLAB_FOLDER_ID"

# Create bridge helper functions
create_bridge_helpers() {
    cat > bridge-helpers.js << 'EOF'
#!/usr/bin/env bun
/**
 * Bridge Helper Functions
 * Auto-generated by init-bridge.sh
 */

import ClaudeColabBridge from '/var/projects/claude-colab-bridge/bridge-client.js';

// Initialize bridge with current project
const bridge = await ClaudeColabBridge.quickStart(
  process.env.COLAB_PROJECT_NAME || 'default_project'
);

// Export convenient functions
export const exec = (code, options) => bridge.exec(code, options);
export const install = (packages) => bridge.install(packages);
export const shell = (command, options) => bridge.shell(command, options);
export const ai = (prompt, model) => bridge.ai(prompt, model);
export const analyze = (data, type) => bridge.analyze(data, type);
export const visualize = (type, data, options) => bridge.visualize(type, data, options);
export const gpu = () => bridge.checkGPU();
export const benchmark = (type) => bridge.benchmark(type);
export const status = () => bridge.getStatus();

// Quick commands
export async function quickTest() {
  console.log('🧪 Testing bridge connection...');
  try {
    const result = await exec('print("Bridge is working!")');
    console.log('✅ Bridge test passed');
    return result;
  } catch (error) {
    console.error('❌ Bridge test failed:', error.message);
    throw error;
  }
}

export default bridge;
EOF

    echo "✅ Created bridge-helpers.js"
}

# Create quick command scripts
create_quick_commands() {
    # Bridge execute command
    cat > bridge-exec << 'EOF'
#!/usr/bin/env bun
import { exec } from './bridge-helpers.js';
const code = process.argv.slice(2).join(' ');
if (code) {
  const result = await exec(code);
  console.log(result.data?.output || result);
} else {
  console.log('Usage: ./bridge-exec "python code here"');
}
EOF

    # Bridge install command
    cat > bridge-install << 'EOF'
#!/usr/bin/env bun
import { install } from './bridge-helpers.js';
const packages = process.argv.slice(2);
if (packages.length > 0) {
  const result = await install(packages);
  console.log(result.data?.stdout || result);
} else {
  console.log('Usage: ./bridge-install package1 package2 ...');
}
EOF

    # Bridge run command
    cat > bridge-run << 'EOF'
#!/usr/bin/env bun
import { shell } from './bridge-helpers.js';
const command = process.argv.slice(2).join(' ');
if (command) {
  const result = await shell(command);
  console.log(result.data?.stdout || result);
} else {
  console.log('Usage: ./bridge-run "shell command here"');
}
EOF

    # Bridge AI command
    cat > bridge-ai << 'EOF'
#!/usr/bin/env bun
import { ai } from './bridge-helpers.js';
const prompt = process.argv.slice(2).join(' ');
if (prompt) {
  const result = await ai(prompt);
  console.log(result.data?.response || result);
} else {
  console.log('Usage: ./bridge-ai "your prompt here"');
}
EOF

    # Make executable
    chmod +x bridge-exec bridge-install bridge-run bridge-ai
    
    echo "✅ Created quick command scripts:"
    echo "   ./bridge-exec \"python code\""
    echo "   ./bridge-install package1 package2"
    echo "   ./bridge-run \"shell command\""
    echo "   ./bridge-ai \"AI prompt\""
}

# Create package.json if it doesn't exist
create_package_json() {
    if [ ! -f "package.json" ]; then
        cat > package.json << EOF
{
  "name": "$PROJECT_NAME",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "bridge-test": "bun bridge-helpers.js",
    "bridge-status": "bun $COLAB_BRIDGE_PATH/bridge-client.js status $PROJECT_NAME"
  },
  "dependencies": {}
}
EOF
        echo "✅ Created package.json"
    else
        echo "ℹ️  package.json already exists"
    fi
}

# Create .env file
create_env_file() {
    cat > .env << EOF
# Claude-Colab Bridge Configuration
COLAB_BRIDGE_PATH="$COLAB_BRIDGE_PATH"
COLAB_FOLDER_ID="$COLAB_FOLDER_ID"
COLAB_PROJECT_NAME="$PROJECT_NAME"
SERVICE_ACCOUNT_PATH="$SERVICE_ACCOUNT_PATH"
EOF
    echo "✅ Created .env file"
}

# Create example usage file
create_example() {
    cat > bridge-example.js << 'EOF'
#!/usr/bin/env bun
/**
 * Claude-Colab Bridge Example
 * Demonstrates how to use the bridge in your project
 */

import bridge from './bridge-helpers.js';

async function runExample() {
  console.log('🌉 Claude-Colab Bridge Example');
  console.log('==============================\n');

  try {
    // Test basic execution
    console.log('1. Testing basic execution...');
    const basicResult = await bridge.exec(`
print("Hello from Colab!")
result = 2 + 2
print(f"2 + 2 = {result}")
    `);
    console.log('✅ Basic execution:', basicResult.data?.output);

    // Test package installation
    console.log('\n2. Testing package installation...');
    await bridge.install(['requests']);
    console.log('✅ Package installed');

    // Test data analysis
    console.log('\n3. Testing data analysis...');
    const analysisResult = await bridge.analyze({
      values: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    });
    console.log('✅ Analysis complete:', analysisResult.data?.analysis.shape);

    // Test AI query (if configured)
    console.log('\n4. Testing AI query...');
    try {
      const aiResult = await bridge.ai('Write a simple Python function to calculate factorial');
      console.log('✅ AI response received');
    } catch (error) {
      console.log('⚠️  AI not configured:', error.message);
    }

    // Check status
    console.log('\n5. Checking bridge status...');
    const status = await bridge.getStatus();
    console.log('✅ Bridge status:', status.running ? 'Running' : 'Not running');

    console.log('\n🎉 All tests completed!');

  } catch (error) {
    console.error('❌ Example failed:', error.message);
    console.log('\n💡 Make sure:');
    console.log('1. Colab is running the processor');
    console.log('2. Service account is configured');
    console.log('3. PROJECT_NAME is set correctly in Colab');
  }
}

runExample();
EOF

    echo "✅ Created bridge-example.js"
}

# Run all setup functions
create_bridge_helpers
create_quick_commands
create_package_json
create_env_file
create_example

echo ""
echo "🎉 Bridge initialization complete!"
echo ""
echo "📋 Next steps:"
echo "1. In Google Colab:"
echo "   - Copy /var/projects/claude-colab-bridge/colab-processor.py"
echo "   - Update PROJECT_NAME = \"$PROJECT_NAME\""
echo "   - Run the cell"
echo ""
echo "2. Test the bridge:"
echo "   bun bridge-example.js"
echo ""
echo "3. Use quick commands:"
echo "   ./bridge-exec \"print('Hello World!')\""
echo "   ./bridge-install numpy pandas"
echo "   ./bridge-run \"ls -la\""
echo "   ./bridge-ai \"Generate Python code\""
echo ""
echo "🌉 Happy bridging!"